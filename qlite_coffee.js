// Generated by CoffeeScript 1.10.0
(function() {
  var QLite, deferred;

  QLite = {
    defer: function() {
      var deferred;
      return deferred = {
        "private": {
          resolve_callbacks: [],
          reject_callbacks: [],
          chained_deferreds: []
        },
        isPromise: function(value) {
          return ((value != null ? value.then : void 0) != null) && typeof value.then === 'function';
        },
        resolve: function(value) {
          var callback_result, chained_deferred, i, len, ref, resolve_callback, results;
          ref = this["private"].resolve_callbacks;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            resolve_callback = ref[i];
            callback_result = resolve_callback(value);
            if (this.isPromise(callback_result)) {
              results.push(callback_result.then(function(callback_value) {
                var chained_deferred, j, len1, ref1, results1;
                ref1 = this["private"].chained_deferreds;
                results1 = [];
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                  chained_deferred = ref1[j];
                  results1.push(chained_deferred.resolve(callback_value));
                }
                return results1;
              }, function(callback_reason) {
                var chained_deferred, j, len1, ref1, results1;
                ref1 = this["private"].chained_deferreds;
                results1 = [];
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                  chained_deferred = ref1[j];
                  results1.push(chained_deferred.reject(callback_reason));
                }
                return results1;
              }));
            } else {
              results.push((function() {
                var j, len1, ref1, results1;
                ref1 = this["private"].chained_deferreds;
                results1 = [];
                for (j = 0, len1 = ref1.length; j < len1; j++) {
                  chained_deferred = ref1[j];
                  results1.push(chained_deferred.resolve(callback_result));
                }
                return results1;
              }).call(this));
            }
          }
          return results;
        },
        reject: 'TODO',
        promise: {
          then: function(onFullfilled, onRejected) {
            var chained_deferred;
            if (onFullfilled != null) {
              deferred["private"].resolve_callbacks.push(onFullfilled);
            }
            if (onRejected != null) {
              deferred["private"].reject_callbacks.push(onRejected);
            }
            chained_deferred = QLite.defer();
            deferred["private"].chained_deferreds.push(chained_deferred);
            return chained_deferred;
          }
        }
      };
    }
  };

  deferred = QLite.defer();

  deferred.promise.then((function() {
    return {};
  }));

  deferred.resolve(2);

}).call(this);
