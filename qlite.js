// Generated by CoffeeScript 1.10.0
(function() {
  var QLite;

  QLite = {
    "private": {
      delay: function(what) {
        setTimeout(what, 0);
      }
    },
    isPromise: function(value) {
      return ((value != null ? value.then : void 0) != null) && typeof value.then === 'function';
    },
    defer: function() {
      var deferred;
      return deferred = {
        "private": {
          chaineds: [],
          settleChained: function(which, how) {
            return function() {
              which.deferred[how.with_operation](how.with_argument);
            };
          },
          settle: function(how) {
            var c1, c2, callback, callback_result, chained, error, error1, j, len, ref;
            ref = this.chaineds;
            for (j = 0, len = ref.length; j < len; j++) {
              chained = ref[j];
              try {
                switch (how.with_operation) {
                  case 'resolve':
                    callback = chained.resolve_callback;
                    break;
                  case 'reject':
                    callback = chained.reject_callback;
                    break;
                  default:
                    null;
                }
                if (callback != null) {
                  callback_result = callback(how.with_argument);
                  if (QLite.isPromise(callback_result)) {
                    c1 = this.settleChained(chained, {
                      with_operation: how.with_operation,
                      with_argument: callback_result
                    });
                    c2 = this.settleChained(chained, {
                      with_operation: 'reject',
                      with_argument: callback_result
                    });
                    callback_result.then(c1, c2);
                  } else {
                    this.settleChained(chained, {
                      with_operation: how.with_operation,
                      with_argument: callback_result
                    })();
                  }
                }
              } catch (error1) {
                error = error1;
                this.settleChained(chained, {
                  with_operation: 'reject',
                  with_argument: error
                })();
              }
              return;
            }
          }
        },
        resolve: function(value) {
          var myself;
          myself = this;
          return QLite["private"].delay(function() {
            return myself["private"].settle({
              with_operation: 'resolve',
              with_argument: value
            });
          });
        },
        reject: function(reason) {
          var myself;
          myself = this;
          return QLite["private"].delay(function() {
            return myself["private"].settle({
              with_operation: 'reject',
              with_argument: reason
            });
          });
        },
        promise: {
          then: function(onFulfilled, onRejected) {
            var chained;
            chained = {
              deferred: QLite.defer()
            };
            if (onFulfilled != null) {
              chained.resolve_callback = onFulfilled;
            }
            chained.reject_callback = onRejected != null ? onRejected : function(reason) {
              return reason;
            };
            deferred["private"].chaineds.push(chained);
            return chained.deferred.promise;
          },
          fail: function(onRejected) {
            this.then(null, onRejected);
          },
          "finally": function(onSettled) {
            this.then(onSettled, onSettled);
          }
        }
      };
    },
    all: function(promises) {
      var check, combined, i, implementation, j, len, notifyFulfillment, notifyRejection, promise;
      combined = QLite.defer();
      implementation = {
        values: [],
        fulfilled: []
      };
      check = function() {
        var fulfilled, j, len, n_fulfilled, ref;
        n_fulfilled = 0;
        ref = implementation.fulfilled;
        for (j = 0, len = ref.length; j < len; j++) {
          fulfilled = ref[j];
          if (fulfilled === true) {
            n_fulfilled++;
          }
        }
        if (n_fulfilled === implementation.fulfilled.length) {
          return combined.resolve(implementation.values);
        }
      };
      notifyFulfillment = function(i, value) {
        implementation.fulfilled[i] = true;
        implementation.values[i] = value;
        return check();
      };
      notifyRejection = function(reason) {
        return combined.reject(reason);
      };
      for (i = j = 0, len = promises.length; j < len; i = ++j) {
        promise = promises[i];
        promise.then((function(value) {
          return notifyFulfillment(i, value);
        }), notifyRejection);
      }
      return combined.promise;
    },
    any: function(promises) {
      return 'TODO';
    }
  };

  window.QLite = QLite;

}).call(this);
